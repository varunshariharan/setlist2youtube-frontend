// Real YouTube API Integration Test - Would catch OAuth issues
import { describe, it, expect, beforeEach, vi } from 'vitest';

describe('YouTube API Integration (End-to-End)', () => {
  beforeEach(() => {
    // Mock Chrome APIs for extension environment
    global.chrome = {
      identity: {
        getAuthToken: vi.fn(),
        getRedirectURL: vi.fn().mockReturnValue('https://extension-id.chromiumapp.org/')
      },
      runtime: {
        getManifest: vi.fn().mockReturnValue({
          oauth2: {
            client_id: process.env.GOOGLE_CLIENT_ID || 'test-client-id.apps.googleusercontent.com',
            scopes: ['https://www.googleapis.com/auth/youtube']
          }
        })
      }
    };
  });

  describe('OAuth Token Validation', () => {
    it('should detect missing OAuth client ID', () => {
      const clientId = process.env.GOOGLE_CLIENT_ID;
      
      if (!clientId || clientId === 'placeholder' || clientId.includes('${')) {
        console.warn('⚠️  OAUTH SETUP INCOMPLETE:');
        console.warn('   1. Missing GOOGLE_CLIENT_ID environment variable');
        console.warn('   2. See OAUTH-SETUP.md for configuration instructions');
        console.warn('   3. Extension will NOT work without proper OAuth setup');
        
        expect.soft(clientId).toBeDefined();
        expect.soft(clientId).not.toBe('placeholder');
        expect.soft(clientId).not.toContain('${');
        
        // Fail the test to make it obvious this needs fixing
        throw new Error('🚨 CRITICAL: OAuth setup incomplete! Extension cannot function without Google Client ID. See OAUTH-SETUP.md');
      }
      
      expect(clientId).toBeDefined();
      expect(clientId).toMatch(/\.apps\.googleusercontent\.com$/);
    });

    it('should validate YouTube scope is configured', () => {
      const manifest = chrome.runtime.getManifest();
      const scopes = manifest.oauth2?.scopes || [];
      
      expect(scopes).toContain('https://www.googleapis.com/auth/youtube');
    });
  });

  describe('YouTube API Mock Integration', () => {
    it('should be able to make YouTube search API call', async () => {
      const mockAccessToken = 'mock_youtube_access_token';
      
      // Mock successful YouTube search API call
      global.fetch = vi.fn().mockResolvedValue({
        ok: true,
        json: async () => ({
          items: [
            {
              id: { videoId: 'mock_video_id' },
              snippet: {
                title: 'Linkin Park - In The End (Official Music Video)',
                channelTitle: 'Linkin Park'
              }
            }
          ]
        })
      });

      const searchUrl = new URL('https://www.googleapis.com/youtube/v3/search');
      searchUrl.searchParams.set('part', 'snippet');
      searchUrl.searchParams.set('q', 'Linkin Park In The End');
      searchUrl.searchParams.set('type', 'video');
      searchUrl.searchParams.set('maxResults', '5');

      const response = await fetch(searchUrl.toString(), {
        headers: {
          'Authorization': `Bearer ${mockAccessToken}`
        }
      });

      const data = await response.json();
      
      expect(response.ok).toBe(true);
      expect(data.items).toHaveLength(1);
      expect(data.items[0].id.videoId).toBe('mock_video_id');
    });

    it('should be able to create YouTube playlist', async () => {
      const mockAccessToken = 'mock_youtube_access_token';
      
      global.fetch = vi.fn().mockResolvedValue({
        ok: true,
        json: async () => ({
          id: 'mock_playlist_id',
          snippet: {
            title: 'Linkin Park – Setlist at Test Venue, 2024',
            description: 'Generated by Know The Show'
          }
        })
      });

      const response = await fetch('https://www.googleapis.com/youtube/v3/playlists?part=snippet', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${mockAccessToken}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          snippet: {
            title: 'Linkin Park – Setlist at Test Venue, 2024',
            description: 'Generated by Know The Show',
            privacyStatus: 'unlisted'
          }
        })
      });

      const data = await response.json();
      
      expect(response.ok).toBe(true);
      expect(data.id).toBe('mock_playlist_id');
    });
  });

  describe('Extension OAuth Flow Validation', () => {
    it('should handle OAuth flow initiation', () => {
      const manifest = chrome.runtime.getManifest();
      const clientId = manifest.oauth2?.client_id;
      
      // This would be the actual OAuth URL the extension would generate
      const authUrl = new URL('https://accounts.google.com/o/oauth2/v2/auth');
      authUrl.searchParams.set('client_id', clientId);
      authUrl.searchParams.set('response_type', 'token');
      authUrl.searchParams.set('scope', 'https://www.googleapis.com/auth/youtube');
      authUrl.searchParams.set('redirect_uri', chrome.identity.getRedirectURL());

      expect(authUrl.searchParams.get('client_id')).toBe(clientId);
      expect(authUrl.searchParams.get('scope')).toBe('https://www.googleapis.com/auth/youtube');
    });
  });

  describe('Critical Issues Detection', () => {
    it('should detect if OAuth is completely missing', () => {
      const manifest = chrome.runtime.getManifest();
      
      if (!manifest.oauth2) {
        throw new Error('🚨 CRITICAL: No oauth2 configuration in manifest! Extension cannot authenticate with YouTube.');
      }
      
      expect(manifest.oauth2).toBeDefined();
      expect(manifest.oauth2.client_id).toBeDefined();
      expect(manifest.oauth2.scopes).toContain('https://www.googleapis.com/auth/youtube');
    });

    it('should properly validate client ID patterns', () => {
      // Test that our validation function correctly identifies invalid patterns
      const validateClientIdPattern = (clientId) => {
        const invalidPatterns = [
          'placeholder',
          '${GOOGLE_CLIENT_ID}',
          'your-client-id-here',
          '',
          null,
          undefined
        ];

        if (invalidPatterns.includes(clientId)) {
          throw new Error(`Invalid client ID pattern: ${clientId}`);
        }

        // Allow test client ID in test environment
        if (process.env.NODE_ENV === 'test' && clientId === 'test-client-id.apps.googleusercontent.com') {
          return true;
        }

        // Validate real Google OAuth client ID format
        if (!clientId || !clientId.match(/^[\d]+-[\w]+\.apps\.googleusercontent\.com$/)) {
          throw new Error(`Invalid Google OAuth client ID format: ${clientId}`);
        }

        return true;
      };

      // Test invalid patterns - these should throw errors
      expect(() => validateClientIdPattern('placeholder')).toThrow('Invalid client ID pattern: placeholder');
      expect(() => validateClientIdPattern('${GOOGLE_CLIENT_ID}')).toThrow('Invalid client ID pattern: ${GOOGLE_CLIENT_ID}');
      expect(() => validateClientIdPattern('')).toThrow('Invalid client ID pattern: ');
      expect(() => validateClientIdPattern(null)).toThrow('Invalid client ID pattern: null');

      // Test valid patterns - these should not throw
      expect(() => validateClientIdPattern('123456789-abcdef.apps.googleusercontent.com')).not.toThrow();
      
      // Test environment-specific test client ID
      const originalEnv = process.env.NODE_ENV;
      process.env.NODE_ENV = 'test';
      expect(() => validateClientIdPattern('test-client-id.apps.googleusercontent.com')).not.toThrow();
      process.env.NODE_ENV = originalEnv;
    });
  });
});
